networks:
  Net:
    name: network

services:
  server:
    init: true
    container_name: server
    build:
      context: ./frontend/server
      dockerfile: Dockerfile
      args:
        PORT: ${PORT}
        HOST: ${HOST}
    image: server:latest
    ports:
      - "8000:443"
    volumes:
      - ./frontend/srcs:/var/www
      - media_data:/var/www/media
    networks:
      - Net
    restart: always
    depends_on:
      - postgres_db
      - auth
      - tictactoe
      - pong
      - chat
      - ws_chat
  pong:
    init: true
    image: pongimage
    container_name: pongcntr
    build: ./backend/Pong
    networks:
      - Net
    depends_on:
      - auth
      - postgres_db
    env_file:
      - .env
    command:
      sh -c "sleep 2 && python3 manage.py makemigrations --noinput  && python3
      manage.py migrate --noinput && python manage.py runserver
      0.0.0.0:8000"
  tictactoe:
    init: true
    image: tttimage
    container_name: tttcntr
    build: ./backend/TicTacToe
    networks:
      - Net
    depends_on:
      - auth
      - postgres_db
    env_file:
      - .env
    command:
      sh -c "sleep 2 && python3 manage.py makemigrations --noinput  && python3
      manage.py migrate --noinput && python manage.py runserver
      0.0.0.0:8000"
  postgres_db:
    init: true
    container_name: postgres_db
    build:
      context: ./backend/postgresql
      dockerfile: Dockerfile
      args:
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_DB: ${POSTGRES_DB}
    image: postgres_db:latest
    ports:
      - "5432:5432"
    env_file:
      - .env
    networks:
      - Net
    # volumes:
    #     - postgres_db:/var/lib/postgresql/data
    restart: always
  auth:
    init: true
    container_name: auth
    build:
      context: ./backend/Authentication
      dockerfile: Dockerfile
    image: auth:latest
    env_file:
      - .env
    ports:
      - "5050:8000"
    networks:
      - Net
    volumes:
      - media_data:/app/media
    depends_on:
      - postgres_db
    restart: always

  chat:
    init: true
    container_name: chat
    build:
      context: ./backend/chat
      dockerfile: Dockerfile
    image: chat:12.5
    env_file:
      - .env
    networks:
      - Net
    depends_on:
      - postgres_db
      - auth
    restart: always
  ws_chat:
    init: true
    container_name: ws_chat
    build:
      context: ./backend/ws_chat
      dockerfile: Dockerfile
    command: sh -c "python3 manage.py makemigrations --noinput  && python3
      manage.py migrate --noinput && python manage.py runserver
      0.0.0.0:8000"
    image: ws_chat:12.5
    env_file:
      - .env
    networks:
      - Net
    depends_on:
      - postgres_db
      - auth
    restart: always
volumes:
  media_data:

  postgres_db:
    driver: local
    name: postgres_db
    driver_opts:
      type: none
      device: ${HOME}/data/postgres_db
      o: bind
# www:
#     name: front_end
#     driver: local
#     driver_opts:
#         type: none
#         device: ${HOME}/data/www
#         o: bind
